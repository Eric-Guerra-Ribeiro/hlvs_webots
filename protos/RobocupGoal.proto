#VRML_SIM R2021b utf8
# license: Apache License 2.0
# license url: http://www.apache.org/licenses/LICENSE-2.0
# tag: static
# Robocup Humanoid League 2021 soccer goal.
# The color and size of the goal can be modified.

PROTO RobocupGoal [
  field SFVec3f    translation        0 0 0
  field SFRotation rotation           0 1 0 0
  field SFString   name               "robotstadium goal"
  field SFColor    frameColor         1 1 1               # Defines the color of the goal frame.
  field SFColor    netColor           0.3 0.3 0.3         # Defines the color of the net.
  field SFString{"adult", "kid"} size "kid"               # Defines the size of the field.
]
{
%{
  -- Official soccer field dimensions from RoboCup 2021 (in meters)

  if fields.size.value == "kid" then
    -- KidSize dimensions
    C = 0.6
    D = 2.6
    GH = 1.2
  else
    -- AdultSize dimensions
    C = 0.6
    D = 2.6
    GH = 1.8
  end

  post_radius = 0.05 -- Diameter/width/depth must be between 0.08-0.12
  post_spacing = D + 2 * post_radius
  post_height = GH + post_radius
<<<<<<< HEAD
  back_post_radius = 0.02 -- Not defined in rules
  bounding_object_thickness_sides = 2 * back_post_radius -- Not defined in rules
=======
  backpost_radius = 0.02 -- Not defined in rules
  bounding_object_thickness_sides = 2 * backpost_radius -- Not defined in rules
>>>>>>> origin/master
  bounding_object_thickness_back = 0.3 -- Not defined in rules

}%

Solid {
  translation IS translation
  rotation IS rotation
  children [
    DEF HORIZONTAL_POST_TRANS Transform {
<<<<<<< HEAD
      translation 0 0 %{= postHeight }%
=======
      translation 0 0 %{= post_height }%
>>>>>>> origin/master
      rotation 0 0 1 1.5708
      children [
        Shape {
          appearance DEF POST_APP PBRAppearance {
            baseColor IS frameColor
            metalness 0
            roughness 0.2
          }
          geometry Capsule {
<<<<<<< HEAD
            height %{= postSpacing }%
            radius %{= postRadius }%
=======
            height %{= post_spacing }%
            radius %{= post_radius }%
>>>>>>> origin/master
          }
        }
      ]
    }
    DEF RIGHT_POST_TRANS Transform {
<<<<<<< HEAD
      translation %{= -postSpacing / 2 }% 0 %{= postHeight / 2 }%
=======
      translation %{= -post_spacing / 2 }% 0 %{= post_height / 2 }%
>>>>>>> origin/master
      rotation 1 0 0 1.5708
      children [
        Shape {
          appearance USE POST_APP
          geometry Cylinder {
            bottom FALSE
            top FALSE
<<<<<<< HEAD
            height %{= postHeight }%
            radius %{= postRadius }%
=======
            height %{= post_height }%
            radius %{= post_radius }%
>>>>>>> origin/master
          }
        }
      ]
    }
    DEF LEFT_POST_TRANS Transform {
<<<<<<< HEAD
      translation %{= postSpacing / 2 }% 0 %{= postHeight / 2 }%
=======
      translation %{= post_spacing / 2 }% 0 %{= post_height / 2 }%
>>>>>>> origin/master
      rotation 1 0 0 1.5708
      children [
        Shape {
          appearance USE POST_APP
          geometry Cylinder {
            bottom FALSE
            top FALSE
<<<<<<< HEAD
            height %{= postHeight }%
            radius %{= postRadius }%
=======
            height %{= post_height }%
            radius %{= post_radius }%
>>>>>>> origin/master
          }
        }
      ]
    }
    Shape {
      appearance DEF NET_APP PBRAppearance {
        baseColor IS netColor
        baseColorMap ImageTexture {
          url "../../../../objects/robotstadium/protos/textures/net.png"
          filtering 0
        }
        metalness 0
        roughness 1
      }
      geometry IndexedFaceSet {
        coord Coordinate {
          point [
<<<<<<< HEAD
            %{= -postSpacing / 2 }% %{= -C }%          0
            %{= postSpacing / 2 }%  %{= -C }%          0
            %{= postSpacing / 2 }%  %{= -C }%          %{= postHeight }%
            %{= -postSpacing / 2 }% %{= -C }%          %{= postHeight }%
            %{= postSpacing / 2 }%  %{= -postRadius }% 0
            %{= -postSpacing / 2 }% %{= -postRadius }% 0
            %{= postSpacing / 2 }%  %{= -postRadius }% %{= postHeight }%
            %{= -postSpacing / 2 }% %{= -postRadius }% %{= postHeight }%
=======
            %{= -post_spacing / 2 }% %{= -C }%          0
            %{= post_spacing / 2 }%  %{= -C }%          0
            %{= post_spacing / 2 }%  %{= -C }%          %{= post_height }%
            %{= -post_spacing / 2 }% %{= -C }%          %{= post_height }%
            %{= post_spacing / 2 }%  %{= -post_radius }% 0
            %{= -post_spacing / 2 }% %{= -post_radius }% 0
            %{= post_spacing / 2 }%  %{= -post_radius }% %{= post_height }%
            %{= -post_spacing / 2 }% %{= -post_radius }% %{= post_height }%
>>>>>>> origin/master
          ]
        }
        texCoord TextureCoordinate {
          point [
            0 0
            28 0
            28 16
            0 16
            7 0
            7 16
            0 16
            28 0
            28 6
            0 6
          ]
        }
        coordIndex [
          0, 1, 2, 3, -1,
          3, 2, 1, 0, -1,
          1, 4, 6, 2, -1,
          2, 6, 4, 1, -1,
          0, 5, 7, 3, -1,
          3, 7, 5, 0, -1,
          2, 3, 7, 6, -1,
          6, 7, 3, 2, -1
        ]
        texCoordIndex [
          0, 1, 2, 3, -1,
          0, 1, 2, 3, -1,
          0, 4, 5, 6, -1,
          0, 4, 5, 6, -1,
          0, 4, 5, 6, -1,
          0, 4, 5, 6, -1,
          0, 7, 8, 9, -1,
          0, 7, 8, 9, -1
        ]
      }
    }
    Transform {
<<<<<<< HEAD
      translation 0 %{= -C }% %{= postHeight }%
=======
      translation 0 %{= -C }% %{= post_height }%
>>>>>>> origin/master
      rotation 0 0 1 1.5708
      children [
        DEF SMALL_HORIZONTAL_POST_SHAPE Shape {
          appearance USE POST_APP
          geometry Capsule {
<<<<<<< HEAD
            height %{= postSpacing }%
            radius %{= backPostRadius }%
=======
            height %{= post_spacing }%
            radius %{= backpost_radius }%
>>>>>>> origin/master
          }
        }
      ]
    }
    Transform {
<<<<<<< HEAD
      translation 0 %{= -C }% %{= backPostRadius / 2 }%
=======
      translation 0 %{= -C }% %{= backpost_radius / 2 }%
>>>>>>> origin/master
      rotation 0 0 1 1.5708
      children [
        USE SMALL_HORIZONTAL_POST_SHAPE
      ]
    }
    Transform {
<<<<<<< HEAD
      translation %{= postSpacing / 2 }% %{= -C }% %{= postHeight / 2 }%
=======
      translation %{= post_spacing / 2 }% %{= -C }% %{= post_height / 2 }%
>>>>>>> origin/master
      rotation 1 0 0 1.5708
      children [
        DEF SMALL_POST_SHAPE Shape {
          appearance USE POST_APP
          geometry Cylinder {
            bottom FALSE
            top FALSE
<<<<<<< HEAD
            height %{=postHeight }%
            radius %{=backPostRadius }%
=======
            height %{=post_height }%
            radius %{=backpost_radius }%
>>>>>>> origin/master
          }
        }
      ]
    }
    Transform {
<<<<<<< HEAD
      translation %{= -postSpacing / 2 }% %{= -C }% %{= postHeight / 2 }%
=======
      translation %{= -post_spacing / 2 }% %{= -C }% %{= post_height / 2 }%
>>>>>>> origin/master
      rotation 1 0 0 1.5708
      children [
        USE SMALL_POST_SHAPE
      ]
    }
    Transform {
<<<<<<< HEAD
      translation %{= postSpacing / 2 }% %{= -C / 2 }% %{= postHeight }%
=======
      translation %{= post_spacing / 2 }% %{= -C / 2 }% %{= post_height }%
>>>>>>> origin/master
      children [
        DEF OTHER_SMALL_POST_SHAPE Shape {
          appearance USE POST_APP
          geometry Cylinder {
            bottom FALSE
            top FALSE
            height %{= C }%
<<<<<<< HEAD
            radius %{= backPostRadius }%
=======
            radius %{= backpost_radius }%
>>>>>>> origin/master
          }
        }
      ]
    }
    Transform {
<<<<<<< HEAD
      translation %{= -postSpacing / 2 }% %{= -C / 2 }% %{= postHeight }%
=======
      translation %{= -post_spacing / 2 }% %{= -C / 2 }% %{= post_height }%
>>>>>>> origin/master
      children [
        USE OTHER_SMALL_POST_SHAPE
      ]
    }
    Transform {
<<<<<<< HEAD
      translation %{= postSpacing / 2 }% %{= -C / 2 }% %{= backPostRadius / 2 }%
=======
      translation %{= post_spacing / 2 }% %{= -C / 2 }% %{= backpost_radius / 2 }%
>>>>>>> origin/master
      children [
        USE OTHER_SMALL_POST_SHAPE
      ]
    }
    Transform {
<<<<<<< HEAD
      translation %{= -postSpacing / 2 }% %{= -C / 2 }% %{= backPostRadius / 2 }%
=======
      translation %{= -post_spacing / 2 }% %{= -C / 2 }% %{= backpost_radius / 2 }%
>>>>>>> origin/master
      children [
        USE OTHER_SMALL_POST_SHAPE
      ]
    }
  ]
  name IS name
  model "robotstadium goal"
  boundingObject Group {
    children [
      USE HORIZONTAL_POST_TRANS
      USE RIGHT_POST_TRANS
      USE LEFT_POST_TRANS
      Transform { # Left
<<<<<<< HEAD
        translation %{= -postSpacing / 2 }% %{= -postRadius - (C - postRadius) / 2 }% %{= (postHeight - backPostRadius) / 2 }%
        children [
          DEF GOAL_SIDE_BOX Box {
            size %{= boundObjThicknessSides }% %{= C - postRadius }% %{= postHeight - backPostRadius }%
=======
        translation %{= -post_spacing / 2 }% %{= -post_radius - (C - post_radius) / 2 }% %{= (post_height - backpost_radius) / 2 }%
        children [
          DEF GOAL_SIDE_BOX Box {
            size %{= bounding_object_thickness_sides }% %{= C - post_radius }% %{= post_height - backpost_radius }%
>>>>>>> origin/master
          }
        ]
      }
      Transform { # Right
<<<<<<< HEAD
        translation %{= postSpacing / 2 }% %{= -postRadius - (C - postRadius) / 2 }% %{= (postHeight - backPostRadius) / 2 }%
=======
        translation %{= post_spacing / 2 }% %{= -post_radius - (C - post_radius) / 2 }% %{= (post_height - backpost_radius) / 2 }%
>>>>>>> origin/master
        children [
          USE GOAL_SIDE_BOX
        ]
      }
      Transform { # Back
<<<<<<< HEAD
        translation 0 %{= -C - boundObjThicknessBack / 2 }% %{= (postHeight+backPostRadius) / 2 }%
        children [
          Box {
            size %{= postSpacing + 2 * backPostRadius }% %{= boundObjThicknessBack }% %{= postHeight + backPostRadius }%
=======
        translation 0 %{= -C - bounding_object_thickness_back / 2 }% %{= (post_height+backpost_radius) / 2 }%
        children [
          Box {
            size %{= post_spacing + 2 * backpost_radius }% %{= bounding_object_thickness_back }% %{= post_height + backpost_radius }%
>>>>>>> origin/master
          }
        ]
      }
      Transform { # Top
<<<<<<< HEAD
        translation 0 %{= -postRadius - (C - postRadius) / 2 }% %{= postHeight }%
        children [
          Box {
            size %{= postSpacing + 2 * backPostRadius }% %{= C - postRadius }% %{= boundObjThicknessSides }%
=======
        translation 0 %{= -post_radius - (C - post_radius) / 2 }% %{= post_height }%
        children [
          Box {
            size %{= post_spacing + 2 * backpost_radius }% %{= C - post_radius }% %{= bounding_object_thickness_sides }%
>>>>>>> origin/master
          }
        ]
      }
    ]
  }
  locked TRUE
}

}
